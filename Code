import yfinance as yf
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.arima.model import ARIMA

# Configuração da interface do Streamlit
st.title("Plataforma de Análise e Previsão de Criptomoedas")
st.write("Explore tendências, indicadores técnicos e previsões para tomar decisões informadas.")

# Seleção da criptomoeda
crypto_symbols = {
    "Bitcoin (BTC)": "BTC-USD",
    "Ethereum (ETH)": "ETH-USD",
    "Binance Coin (BNB)": "BNB-USD",
    "Ripple (XRP)": "XRP-USD",
}

crypto = st.selectbox("Escolha a criptomoeda:", list(crypto_symbols.keys()))
symbol = crypto_symbols[crypto]

# Seleção do período
period = st.radio("Selecione o período para análise:", ["1mo", "3mo", "6mo", "1y", "5y"])

# Baixar os dados do Yahoo Finance
data = yf.download(symbol, period=period)
st.write("### Dados Históricos de Preços")
st.dataframe(data.tail())

# Gráfico de Preços
st.write("### Gráfico de Preços de Fechamento")
fig, ax = plt.subplots(figsize=(10, 5))
ax.plot(data["Close"], label="Preço de Fechamento", color="blue")
ax.set_title(f"Preço de Fechamento: {crypto}")
ax.set_xlabel("Data")
ax.set_ylabel("Preço (USD)")
ax.legend()
st.pyplot(fig)

# Cálculo do RSI
def calculate_rsi(data, window=14):
    delta = data["Close"].diff(1)
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=window).mean()
    avg_loss = loss.rolling(window=window).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

data["RSI"] = calculate_rsi(data)
st.write("### RSI (Índice de Força Relativa)")
st.line_chart(data["RSI"])

# Cálculo das Médias Móveis
data["SMA_20"] = data["Close"].rolling(window=20).mean()
data["EMA_20"] = data["Close"].ewm(span=20, adjust=False).mean()

st.write("### Médias Móveis (SMA e EMA)")
st.line_chart(data[["Close", "SMA_20", "EMA_20"]])

# Cálculo das Bandas de Bollinger
def calculate_bollinger_bands(data, window=20):
    sma = data["Close"].rolling(window=window).mean()
    std = data["Close"].rolling(window=window).std()
    data["Bollinger_Upper"] = sma + (std * 2)
    data["Bollinger_Lower"] = sma - (std * 2)
    return data

data = calculate_bollinger_bands(data)
st.write("### Bandas de Bollinger")
st.line_chart(data[["Close", "Bollinger_Upper", "Bollinger_Lower"]])

# Cálculo do MACD
def calculate_macd(data, short_window=12, long_window=26, signal_window=9):
    short_ema = data["Close"].ewm(span=short_window, adjust=False).mean()
    long_ema = data["Close"].ewm(span=long_window, adjust=False).mean()
    data["MACD"] = short_ema - long_ema
    data["Signal_Line"] = data["MACD"].ewm(span=signal_window, adjust=False).mean()
    return data

data = calculate_macd(data)
st.write("### MACD (Convergência/Divergência de Médias Móveis)")
st.line_chart(data[["MACD", "Signal_Line"]])

# Previsão com Regressão Linear
data["Days"] = (data.index - data.index[0]).days
X = np.array(data["Days"]).reshape(-1, 1)
y = data["Close"]

model = LinearRegression()
model.fit(X, y)
data["Linear_Prediction"] = model.predict(X)

st.write("### Previsão com Regressão Linear")
st.line_chart(data[["Close", "Linear_Prediction"]])

# Previsão com ARIMA
def arima_forecast(data, periods=10):
    model = ARIMA(data["Close"], order=(1, 1, 1))
    model_fit = model.fit()
    forecast = model_fit.forecast(steps=periods)
    return forecast

forecast = arima_forecast(data)
st.write("### Previsão com ARIMA (Próximos 10 dias)")
st.write(forecast)

# Simulador de Investimento
st.write("### Simulador de Investimento")
initial_investment = st.number_input("Valor inicial de investimento (USD):", value=1000.0)
if initial_investment > 0:
    closing_prices = data["Close"].values
    if len(closing_prices) > 0:
        investment_return = initial_investment * (closing_prices[-1] / closing_prices[0])
        st.write(f"Com um investimento inicial de **${initial_investment:.2f}**, o retorno seria **${investment_return:.2f}** no período escolhido.")

# Estratégia Baseada no RSI
def rsi_strategy(data):
    signals = []
    for rsi in data["RSI"]:
        if rsi < 30:
            signals.append("Comprar")
        elif rsi > 70:
            signals.append("Vender")
        else:
            signals.append("Manter")
    return signals

data["Estratégia RSI"] = rsi_strategy(data)
st.write("### Sinal de Estratégia RSI")
st.dataframe(data[["Close", "RSI", "Estratégia RSI"]])
